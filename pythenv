#!/usr/bin/env python
# encoding: UTF-8

'''
Script to create virtualenv and install dependencies on the fly to run scripts.
Dependencies might be declared:
- In a requirements file that shall be passed on command line.
- In a comment at the beginning of the script, such as:
  # requirements: foo==1.2.3, bar
'''

from __future__ import print_function

import os
import re
import sys
import getopt
import atexit
import tempfile
import subprocess


HELP = '''pythenv [-r requirements.txt]Â script.py [args...]
-r requirements.txt   The requirements file to run script
script.py             The Python script to run
args..                The script arguments
If you don't pass a requirements file, they must be embedded in script
with a comment such as: # requirements: foo==1.2.3, bar'''
RED = '\033[91m\033[1m'
END = '\033[0m'


def error(message, code, hlp=False):
    '''
    Print an error message:
    - message: the message to print
    - code: the exit code
    - hlp: tells if we should print help
    '''
    print("%sERROR%s: %s" % (RED, END, message))
    print(message)
    if hlp:
        print(HELP)
    sys.exit(code)


def run(command):
    '''
    Run given command:
    - command: command to run
    Return:
    - command return code
    - command output on stdout and stderr
    '''
    with subprocess.Popen(command,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE) as process:
        stdout, stderr = process.communicate()
        return process.returncode, stdout.strip()+stderr.strip()


def parse_dependencies(py_file):
    '''
    Parse dependencies and generate a temporary requirements file:
    - py_file: the name of the script to parse
    Return: the name of temporary requirements file
    '''
    source = None
    with open(py_file) as stream:
        source = stream.read()
    match = re.search(r'^#\s*requirements:\s+(.*?)$',
                      source, flags=re.MULTILINE)
    if match:
        requirements = match.group(1)
    else:
        return None
    text = '\n'.join([l.strip() for l in requirements.split(",")])
    _, tmp_file = tempfile.mkstemp(prefix='pythenv-requirements-',
                                   suffix='.txt', dir='/tmp')
    with open(tmp_file, 'w') as stream:
        stream.write(text)
    atexit.register(os.remove, tmp_file)
    return tmp_file


def create_virtualenv():
    '''
    Create a virtualenv
    Return: the virtualenv directory path
    '''
    env_dir = tempfile.mkdtemp(prefix='pythenv-', dir='/tmp')
    major, minor = sys.version_info[:2]
    if major > 2 and minor > 5:
        command = ('python', '-m', 'venv', env_dir)
    elif major > 2 and minor > 2:
        command = ('pyvenv', env_dir)
    else:
        command = ('virtualenv', env_dir)
    code, output = run(command)
    if code:
        error("creating virtualenv:\n%s" % output, code)
    atexit.register(run, ('rm', '-rf', env_dir))
    return env_dir


def install_reqs(env_dir, reqs_file):
    '''
    Install requirements:
    - env_dir: the virtualenv directory
    - reqs_file: the requirements file name
    '''
    command = (os.path.join(env_dir, 'bin', 'pip'), 'install', '-r', reqs_file)
    code, output = run(command)
    if code:
        error("installing dependencies:\n%s" % output, code)


def run_script(env_dir, script_file, args):
    '''
    Run script:
    - env_dir: virtualenv directory
    - script_file: the file of the script to run
    - args: script arguments
    Return: the script return code
    '''
    command = [os.path.join(env_dir, 'bin', 'python'), script_file] + args
    return subprocess.call(command)


def main(reqs_file, script_file, args):
    '''
    Create virtualenv, install dependencies and run the script:
    - reqs_file: requirements file passed on command line
    - script_file: script passed on command line
    - args: script arguments passed on command line
    '''
    env_dir = create_virtualenv()
    if reqs_file:
        install_reqs(env_dir, reqs_file)
    if script_file:
        deps_file = parse_dependencies(script_file)
        if deps_file:
            install_reqs(env_dir, deps_file)
        code = run_script(env_dir, script_file, args)
        sys.exit(code)
    else:
        os.system(os.path.join(env_dir, 'bin', 'python'))


if __name__ == '__main__':
    REQS = None
    try:
        OPTS, ARGS = getopt.getopt(sys.argv[1:], "hr:",
                                   ["help", "requirements="])
    except getopt.GetoptError as err:
        print(str(err))
        sys.exit(1)
    for opt, arg in OPTS:
        if opt in ('-r', '--requirements'):
            REQS = arg
        elif opt in ('-h', '--help'):
            print(HELP)
            sys.exit()
        else:
            print("Unhandled option %s" % opt)
            sys.exit(1)
    if ARGS:
        SCRIPT = ARGS[0]
        PARAMS = ARGS[1:]
    else:
        SCRIPT = None
        PARAMS = ARGS
    main(REQS, SCRIPT, PARAMS)
